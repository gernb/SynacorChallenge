6027: 1 32768 6 18


R1 = 4
R2 = 1
R8 = ???

6027: 7 32768 6035            JT R1 6035; JMP 6035 if R1 != 0
6030: 9 32768 32769 1         ADD R1 R2 1; R1 = (R2 + 1) % 32768
6034: 18                      RET; IP = ToS

6035: 7 32769 6048            JT R2 6048; JMP 6048 if R2 != 0
6038: 9 32768 32768 32767     ADD R1 R1 32767; R1 = (R1 + 32767) % 32768
6042: 1 32769 32775           SET R2 R8; R2 = R8
6045: 17 6027                 CALL 6027; JMP 6027; ToS = 6047
6047: 18                      RET; IP = ToS

6048: 2 32768                 PUSH R1; ToS = R1
6050: 9 32769 32769 32767     ADD R2 R2 32767; R2 = (R2 + 32767) % 32768
6054: 17 6027                 CALL 6027; JMP 6027; ToS = 6056
6056: 1 32769 32768           SET R2 R1; R2 = R1
6059: 3 32768                 POP R1; R1 = ToS
6061: 9 32768 32768 32767     ADD R1 R1 32767; R1 = (R1 + 32767) % 32768
6065: 17 6027                 CALL 6027; JMP 6027; ToS = 6067
6067: 18                      RET; IP = ToS


func mystery(r1: Int, r2: Int, r8: Int) -> Int {
	var r1 = r1
	var r2 = r2
	if r1 == 0 {
		return (r2 + 1) % 32768
	}
	
	if r2 == 0 {
		r1 = (r1 + 32767) % 32768
		r2 = r8
		return mystery(r1: r1, r2: r2, r8: r8)
	}
	
	r2 = (r2 + 32767) % 32768
	r2 = mystery(r1: r1, r2: r2, r8: r8)
	r1 = (r1 + 32767) % 32768
	return mystery(r1: r1, r2: r2: r8: r8)
}
